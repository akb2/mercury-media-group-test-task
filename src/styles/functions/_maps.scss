@use "sass:map";
@use "sass:list";
@use "sass:meta";

// Получение данных
@function get($map, $keys...) {
  $ret: $map;

  @each $key in $keys {
    // Элемент является мэпом
    @if (meta.type-of($ret) == map) {
      @if (map.get($ret, $key)) {
        $ret: map.get($ret, $key);
      } @else {
        $ret: map.get($ret, default);
      }
    }

    // Элемент является списком
    @else if (meta.type-of($ret) == list) {
      @if (list.nth($ret, $key)) {
        $ret: list.nth($ret, $key);
      } @else {
        $ret: null;
      }
    }

    // Элемент не массив
    @else {
      $ret: null;
    }
  }

  @return $ret;
}

// Проверка данных
@function has-key($map, $keys...) {
  $_temp: $map;

  @each $key in $keys {
    // Элемент является мэпом
    @if (meta.type-of($_temp) == map) {
      @if (map.has-key($_temp, $key)) {
        $_temp: map.get($_temp, $key);
      } @else {
        @return false;
      }
    }

    // Элемент является списком
    @else if (meta.type-of($_temp) == list) {
      @if (list.nth($_temp, $key)) {
        $_temp: list.nth($_temp, $key);
      } @else {
        $_temp: null;
      }
    } @else {
      @return false;
    }
  }

  @return true;
}

// Получение данных
@function size($map, $keys...) {
  $__map: get($map, $keys);
  $__ret: 0;

  @if ($__map != null) {
    @if (meta.type-of($__map) == map) {
      @each $key, $value in $__map {
        $__ret: $__ret + 1;
      }
    } @else if (meta.type-of($__map) == list) {
      @each $value in $__map {
        $__ret: $__ret + 1;
      }
    } @else {
      $__ret: 1;
    }
  }

  @return $__ret;
}
